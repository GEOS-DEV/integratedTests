
curvecheck_params_base = {}
curvecheck_params_base["filename"] = "displacementJump_embeddedFrac.hdf5"
curvecheck_params_base["curvecheck_tol"] = [1e-10]
curvecheck_params_base["script_instructions"] = [["./sneddonCurveChecks.py", "sneddon_curve_check_solution", "displacementJump"]]
curvecheck_params_base["curves"] = "displacementJump"

# Define cases
sneddon_smoke = {
    "name": "Sneddon_embeddedFrac_smoke",
    "description": "Smoke test for Sneddon's problem with horizontal fracture",
    "partitions": ((1, 1, 1), (2, 2, 1)),
    "restart_step": 0,
    "check_step": 1,
    "perform_curvecheck": False,
    "curvecheck_tol": [1],
    "perform_restartcheck": True,
    "atol": 1.0E-8,
    "rtol": 4.0E-7
}

sneddon_benchmark = {
    "name": "Sneddon_embeddedFrac_benchmark",
    "description": "Sneddon's problem with horizontal fracture (uses MGR)",
    "partitions": ((1, 1, 1),),
    "restart_step": 0,
    "check_step": 1,
    "perform_curvecheck": True,
    "curvecheck_tol": [1e-5],
    "perform_restartcheck": False,
}

sneddon_staticCondensation_smoke = {
    "name": "Sneddon_embeddedFrac_staticCondensation_smoke",
    "description": "Sneddon with horizontal fracture usic static condensation",
    "partitions": ((1, 1, 1), (2, 2, 1)),
    "restart_step": 0,
    "check_step": 1,
    "perform_restartcheck": True,
    "atol": 1.0E-8,
    "rtol": 4.0E-7
}

sneddon_staticCondensation_benchmark = {
    "name": "Sneddon_embeddedFrac_staticCondensation_benchmark",
    "description": "Sneddon's problem with horizontal fracture (uses static condensation + AMG)",
    "partitions": ((1, 1, 1),),
    "restart_step": 0,
    "check_step": 1,
    "perform_curvecheck": True,
    "curvecheck_tol": [1e-5],
    "perform_restartcheck": False,
}

sneddon_rotated_smoke = {
    "name": "SneddonRotated_smoke",
    "description": "Sneddon with inclined fracture",
    "partitions": ((1, 1, 1), (2, 2, 1)),
    "restart_step": 0,
    "check_step": 1,
    "perform_restartcheck": True,
    "atol": 1.0E-8,
    "rtol": 4.0E-7
}

compression_frictionless = {
    "name": "EmbFrac_Compression_Frictionless",
    "description": "Single efem fracture under compression - frictionless",
    "partitions": ((1, 1, 1), (2, 2, 1)),
    "restart_step": 0,
    "check_step": 1,
    "perform_restartcheck": True,
    "atol": 1.0E-6,
    "rtol": 4.0E-7
}

compression_CoulombFriction = {
    "name": "EmbFrac_Compression_CoulombFriction",
    "description": "Single efem fracture under compression - Coulomb friction",
    "partitions": ((1, 1, 1), (2, 2, 1)),
    "restart_step": 0,
    "check_step": 1,
    "perform_restartcheck": True,
    "atol": 1.0E-6,
    "rtol": 4.0E-7
}

decks = (sneddon_smoke,
         sneddon_benchmark,
         sneddon_staticCondensation_smoke,
         sneddon_staticCondensation_benchmark,
         sneddon_rotated_smoke,
         compression_frictionless,
         compression_CoulombFriction
        )

cases = []

for deck in decks:
    # deck, description, partitions, restart_step, num_steps
    partitions = deck["partitions"]
    num_partitions = len(partitions)
    for i in range(num_partitions):
        nx, ny, nz = partitions[i]
        N = nx * ny * nz
        testcase_name = "{}_{:02d}".format(deck["name"], N)
        base_name = "0to{:d}".format(deck["check_step"])

        curvecheck_params = None
        if ("perform_curvecheck" in deck):
            if deck["perform_curvecheck"] == True:
              curvecheck_params = curvecheck_params_base.copy()
              if ("curvecheck_tol" in deck):
                curvecheck_params["tolerance"] = deck["curvecheck_tol"]

        restartcheck_params = None
        if ("perform_restartcheck" in deck):
            if deck["perform_restartcheck"] == True:
              restartcheck_params = {}
              restartcheck_params["atol"] = deck["atol"]
              restartcheck_params["rtol"] = deck["rtol"]

        steps = [geos(deck="{}.xml".format(deck["name"]),
                      name=base_name,
                      np=N,
                      ngpu=N,
                      x_partitions=nx,
                      y_partitions=ny,
                      z_partitions=nz,
                      restartcheck_params=restartcheck_params,
                      curvecheck_params=curvecheck_params)]

        if deck["restart_step"] > 0:
            steps.append(geos(deck="{}.xml".format(deck["name"]),
                           name="{:d}to{:d}".format(deck["restart_step"], deck["check_step"]),
                           np=N,
                           ngpu=N,
                           x_partitions=nx,
                           y_partitions=ny,
                           z_partitions=nz,
                           restart_file=os.path.join(testcase_name, "{}_restart_{:09d}".format(base_name, deck["restart_step"])),
                           baseline_pattern=f"{base_name}_restart_[0-9]+\.root",
                           allow_rebaseline=False,
                           restartcheck_params=restartcheck_params))

        tmp = TestCase(name=testcase_name,
                 desc=deck["description"],
                 label="auto",
                 owner="Matteo Cusini, Jian Huang",
                 independent=True,
                 steps=steps)

        cases.append(tmp)