# format: (<input>, <desc>, <partition_list>, <restart_step>, <total_steps>, <restartcheck_params>)
decks = (("SlipPermeability_pEDFM_smoke", "pEDFM slip dependent permeability case", ((1, 1, 1), (2, 2, 1)), 0, 1, {
    "atol": 1.0E-7,
    "rtol": 4.0E-6
}), ("WillisRichardsPermeability_EDFM", "WillisRichards Permeability model with EDFM", ((1, 1, 1), (2, 2, 1)), 0, 5, {
    "atol": 1.0E-7,
    "rtol": 4.0E-6
}), ("PoroElastic_conformingFracture_2d_openingFrac_horizontal", "PoroElastic conformingFracture 2d case",
     ((1, 1, 1), (2, 2, 1)), 0, 10, {
         "atol": 1.0E-7,
         "rtol": 4.0E-6
     }), ("PoroElastic_conformingFracture_2d_openingFrac_vertical", "PoroElastic conformingFracture 2d case",
          ((1, 1, 1), (2, 2, 1)), 0, 10, {
              "atol": 1.0E-7,
              "rtol": 4.0E-6
          }), ("PoroElastic_efem-edfm_pressurizedFrac_smoke", "poromechanics efem-edfm pressurized vertical frac",
               ((1, 1, 1), (2, 2, 1)), 0, 1, {
                   "atol": 1.0E-7,
                   "rtol": 4.0E-6
               }), ("PoroElastic_efem-edfm_verticalFrac_smoke", "poromechanics efem-edfm vertical frac",
                    ((1, 1, 1), (2, 2, 1)), 0, 1, {
                        "atol": 1.0E-7,
                        "rtol": 4.0E-6
                    }), ("PoroElastic_efem-edfm_inclinedFrac_smoke", "poromechanics efem-edfm inclined frac",
                         ((1, 1, 1), (2, 2, 1)), 0, 1, {
                             "atol": 1.0E-7,
                             "rtol": 4.0E-6
                         }), ("ExponentialDecayPermeability_edfm", "Exponential Decay Permeability model with EDFM",
                              ((1, 1, 1), (2, 2, 1)), 0, 5, {
                                  "atol": 1.0E-7,
                                  "rtol": 4.0E-6
                              }),
         ("ExponentialDecayPermeability_conformingFracture",
          "Exponential Decay Permeability model with conforming fracture", ((1, 1, 1), (2, 2, 1)), 0, 12, {
              "atol": 1.0E-5,
              "rtol": 4.0E-4
          }))

for deck, description, partitions, restart, num_steps, restartcheck_params in decks:
    for partition in partitions:
        nx = partition[0]
        ny = partition[1]
        nz = partition[2]
        N = nx * ny * nz

        if N > 0:
            testcase_name = "%s_%02d" % (deck, N)
            base_name = "0to%d" % num_steps

            steps = (geos(deck=deck + ".xml",
                          name=base_name,
                          np=N,
                          ngpu=N,
                          x_partitions=nx,
                          y_partitions=ny,
                          z_partitions=nz,
                          restartcheck_params=restartcheck_params), )

            if restart > 0:
                steps += (geos(deck=deck + ".xml",
                               name="%dto%d" % (restart, num_steps),
                               np=N,
                               ngpu=N,
                               x_partitions=nx,
                               y_partitions=ny,
                               z_partitions=nz,
                               restart_file=os.path.join(testcase_name, "%s_restart_%09d" % (base_name, restart)),
                               baseline_pattern="%s_restart_[0-9]+\.root" % base_name,
                               allow_rebaseline=False,
                               restartcheck_params=restartcheck_params), )

            TestCase(name=testcase_name,
                     desc=description,
                     label="auto",
                     owner="Matteo Cusini",
                     independent=True,
                     steps=steps)
